# bin/up --profile=mysql
# bin/install-root-ca --all

volumes:
  step:
  tls:
  traefik:
  letsencrypt:
  mail:
  prometheus:
  mysql-8:
  mysql-5:
  mariadb-11:

networks:
  default:
    name: ${ENV_NET_NAME:-env}
    attachable: true
    ipam:
      config:
        - subnet: 172.22.${ENV_NET:-0}.0/22 #172.22.0.1 - 172.22.23.254
          ip_range: 172.22.${ENV_NET_RANGE:-2}.0/23 #172.22.2.1 - 172.20.23.254

services:

  tunnel:
    profiles:
      - _
      - tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    hostname: tunnel.${ENV_TUNNEL_NAME:-${ENV_NET:-0}}${ENV_RUN:-}
    networks:
      default:
        ipv4_address: 172.22.${ENV_NET:-0}.1${ENV_RUN:-0}0
    environment:
      TUNNEL_TOKEN: ${ENV_TUNNEL_TOKEN}
    command: tunnel run

  init:
#    profiles: [_]
    image: smallstep/step-ca:latest
    user: root
    volumes:
      - traefik:/mnt/traefik
      - letsencrypt:/mnt/letsencrypt
      - tls:/mnt/tls
      - mail:/mnt/mail
    entrypoint:
      - bash
      - -c
      - mkdir -p /mnt/mail/{config,storage,state,logs} && chown step:step /mnt -R

  ca:
#    profiles: [_]
    image: smallstep/step-ca:latest
    restart: unless-stopped
    depends_on:
      init:
        condition: service_completed_successfully
    volumes:
      - step:/home/step
    environment:
      DOCKER_STEPCA_INIT_NAME: ${ENV_DOMAIN:-app.localhost}
      DOCKER_STEPCA_INIT_DNS_NAMES: ca,ca.${ENV_DOMAIN:-app.localhost}
      DOCKER_STEPCA_INIT_PASSWORD: ${ENV_PASS:-}
      DOCKER_STEPCA_INIT_ACME: "true"
      DOCKER_STEPCA_INIT_SSH: "true"
#      DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT: "true"

    command:
      - bash
      - -c
      - |
        set -e
        
        [ -f ~/.bashrc ] || {
        step completion bash | tee ~/.bashrc
        # for random passwords the provisioner must be recreated 
        step ca provisioner remove admin
        step ca provisioner add admin \
          --create \
          --x509-min-dur=1m \
          --x509-max-dur=240000h \
          --password-file=secrets/password 
        }
        
        step-ca --password-file ~/secrets/password ~/config/ca.json

  # docker compose run --rm --entrypoint=bash default-cert
  default-cert:
#    profiles: [_]
    image: smallstep/step-ca:latest
    restart: unless-stopped
    depends_on:
      ca:
        condition: service_healthy
    volumes:
      - step:/home/step
      - traefik:/traefik
      - tls:/run/tls
    entrypoint:
      - bash
      - -c
      - |
        set -e
        
        [ -f /traefik/default-cert.yml ] || {
        tee "/traefik/default-cert.yml" <<EOF
        tls:
          stores:
            default:
              defaultCertificate:
                certFile: /run/tls/traefik.crt
                keyFile: /run/tls/traefik.key
        EOF
        }
        
        step ca certificate \
          --force \
          --provisioner=admin --password-file=secrets/password \
          --not-after=240h \
          --san="app.localhost" --san="*.app.localhost" \
          app.localhost /run/tls/traefik.crt /run/tls/traefik.key
        
        step ca root > /run/tls/traefik-ca.crt

        step ca renew --daemon --renew-period=30s \
          --exec="touch /traefik/default-cert.yml" \
          /run/tls/traefik.crt /run/tls/traefik.key

  traefik:
#    profiles: [_]
    image: traefik:3
    depends_on:
      default-cert:
        condition: service_healthy
    restart: unless-stopped
    hostname: traefik.${ENV_TUNNEL_NAME:-${ENV_NET:-0}}${ENV_RUN:-}
    networks:
      default:
        ipv4_address: 172.22.${ENV_NET:-0}.1${ENV_RUN:-0}1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik:/traefik
      - letsencrypt:/letsencrypt
      - tls:/run/tls:ro
    environment:
      - TZ=${ENV_TZ:-Europe/Berlin}
    command:
      # https://doc.traefik.io/traefik/operations/api/
      - --api=true
      - --api.dashboard=true
      - --api.insecure=false
      - --api.basePath=/traefik
      #- --api.debug=true
      # https://doc.traefik.io/traefik/observability/logs/
      - --log.level=WARN
      # https://doc.traefik.io/traefik/observability/access-logs/
      - --accesslog=true
      - --accesslog.fields.names.StartUTC=drop
      # https://doc.traefik.io/traefik/observability/metrics/prometheus/
      - --metrics.prometheus=true
      - --metrics.prometheus.addrouterslabels=true
      # https://doc.traefik.io/traefik/observability/tracing/overview/
      #- --tracing=true
      #- --tracing.datadog=true
      # https://doc.traefik.io/traefik/providers/docker/
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # https://doc.traefik.io/traefik/providers/file/
      - --providers.file.directory=/traefik
      - --providers.file.watch=true
      # https://doc.traefik.io/traefik/middlewares/http/redirectscheme/
      - --entrypoints.80.address=:80
      - --entrypoints.80.http.redirections.entrypoint.to=:443
      - --entrypoints.80.http.redirections.entrypoint.scheme=https
      - --entrypoints.80.http.redirections.entrypoint.permanent=true
      - --entrypoints.443.address=:443
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=80

      - --certificatesresolvers.ca.acme.caserver=https://ca:9000/acme/acme/directory
      #      - --certificatesresolvers.ca.acme.email=ignore@localhost
      - --certificatesresolvers.ca.acme.tlsChallenge=true

      # https://doc.traefik.io/traefik/routing/overview/#rootcas
      - --serversTransport.rootCAs=/run/tls/traefik-ca.crt

    labels:
      traefik.enable: true
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.entrypoints: 443
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: letsencrypt

      # https://traefik.app.localhost/
      # traefik.http.routers.traefik.rule: Host(`traefik.${ENV_DOMAIN:-app.localhost}`)

      # https://app.localhost/traefik/
      traefik.http.routers.traefik.rule: ${ENV_TRAEFIK_TR_RULE:-Host(`${ENV_DOMAIN:-app.localhost}`) && (PathPrefix(`/traefik`))}
      # see https://doc.traefik.io/traefik/middlewares/http/stripprefixregex/
      traefik.http.middlewares.traefik-path.replacepathregex.regex: ^/traefik/$
      traefik.http.middlewares.traefik-path.replacepathregex.replacement: /traefik

      traefik.http.routers.traefik.middlewares: ${ENV_TRAEFIK_TR_MIDDLEWARES:-auth,traefik-path}
      # see https://doc.traefik.io/traefik/middlewares/http/basicauth/
      # sudo apt install -y apache2-utils
      # htpasswd -nB admin
      # escape '$' with '$$' in compose.yml
      # admin/admin
      traefik.http.middlewares.auth.basicauth.users: ${ENV_AUTH:-admin:$$2y$$05$$yrOjlUeRyiwyOhg8mR42HuJeuQXJdZOFcwgHk3eDU5vD5E2AzyaDa}

  prometheus:
    profiles:
      - _
      - monitoring
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    volumes:
      - ./etc/prometheus.yml:/etc/prometheus.yml:ro
      - prometheus:/data

    # https://prometheus.io/docs/prometheus/latest/command-line/prometheus/
    command:
      - --log.level=warn
      - --config.file=/etc/prometheus.yml
      - --storage.tsdb.retention.size=256MB
      - --web.external-url=/prometheus/
    labels:
      traefik.enable: true
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
      traefik.http.routers.prometheus.service: prometheus
      traefik.http.routers.prometheus.entrypoints: 443
      traefik.http.routers.prometheus.tls: true
      traefik.http.routers.prometheus.tls.certresolver: letsencrypt
      traefik.http.routers.prometheus.rule: Host(`${ENV_DOMAIN:-app.localhost}`) && PathPrefix(`/prometheus`)
      traefik.http.routers.prometheus.middlewares: auth

  mariadb-11:
    profiles:
      - _
      - mariadb
      - db
    build:
      dockerfile_inline: |-
        FROM mariadb:11
        
        RUN cat > /usr/local/sbin/env-prepare <<EOR
        #!/usr/bin/env bash
        cat > /tmp/my.extra.cnf <<EOF
        [client]
        host=mariadb-11
        user=root
        password=\$${MARIADB_ROOT_PASSWORD}
        EOF
        EOR

        RUN cat > /usr/local/sbin/env-db <<EOR
        #!/usr/bin/env bash
        env-prepare
        mariadb --defaults-extra-file=/tmp/my.extra.cnf "\$$@"
        EOR

        RUN cat > /usr/local/sbin/env-dump <<EOR
        #!/usr/bin/env bash
        env-prepare
        mariadb-dump --defaults-extra-file=/tmp/my.extra.cnf "\$$@"
        EOR

        RUN cat > /usr/local/sbin/env-dump-tables <<EOR
        #!/usr/bin/env bash
        function main() {
          local db=\$${1}; shift
          local dst=\$${db}-\$$(date +%y%m%d-%H%M)
          mkdir -p \$${dst}
          local sql="SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE LIKE 'BASE TABLE' AND TABLE_SCHEMA = '\$${db}';"
          local table
          for table in \$$(env-db -NBA -e "\$$sql")
          do
            echo "DUMPING TABLE: \$${db} \$${table} to \$${dst}/\$${table}.sql"
            env-dump \$$@ \$${db} \$${table} > \$${dst}/\$${table}.sql
          done
        }
        main "\$$@"
        EOR

        RUN chmod +x /usr/local/sbin/*

    restart: unless-stopped
    hostname: mariadb-11.${ENV_TUNNEL_NAME:-${ENV_NET:-0}}${ENV_RUN:-}
    networks:
      default:
        ipv4_address: 172.22.${ENV_NET:-0}.1${ENV_RUN:-0}2
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - mariadb-11:/var/lib/mysql
    environment:
      MARIADB_USER: ${MARIADB_USER:-${MYSQL_USER:-mysql}}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD:-${MYSQL_PASSWORD:-mysql}}
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD:-${MYSQL_ROOT_PASSWORD:-${MYSQL_PASSWORD:-root}}}
    ports:
      - ${ENV_MARIADB11_PORT:-127.0.0.1:3306}:3306/tcp

  mysql-8:
    profiles:
      - _
      - mysql-8
      - db
    build:
      dockerfile_inline: |-
        FROM mysql:8
        
        RUN cat > /usr/local/sbin/env-prepare <<EOR
        #!/usr/bin/env bash
        cat > /tmp/my.extra.cnf <<EOF
        [client]
        host=mysql-8
        user=root
        password=\$${MYSQL_ROOT_PASSWORD}
        EOF
        EOR

        RUN cat > /usr/local/sbin/env-db <<EOR
        #!/usr/bin/env bash
        env-prepare
        mysql --defaults-extra-file=/tmp/my.extra.cnf "\$$@"
        EOR

        RUN cat > /usr/local/sbin/env-dump <<EOR
        #!/usr/bin/env bash
        env-prepare
        mysqldump --defaults-extra-file=/tmp/my.extra.cnf "\$$@"
        EOR

        RUN cat > /usr/local/sbin/env-dump-tables <<EOR
        #!/usr/bin/env bash
        function main() {
          local db=\$${1}; shift
          local dst=\$${db}-\$$(date +%y%m%d-%H%M)
          mkdir -p \$${dst}
          local sql="SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE LIKE 'BASE TABLE' AND TABLE_SCHEMA = '\$${db}';"
          local table
          for table in \$$(env-db -NBA -e "\$$sql")
          do
            echo "DUMPING TABLE: \$${db} \$${table} to \$${dst}/\$${table}.sql"
            env-dump \$$@ \$${db} \$${table} > \$${dst}/\$${table}.sql
          done
        }
        main "\$$@"
        EOR

        RUN chmod +x /usr/local/sbin/*
    restart: unless-stopped
    hostname: mysql-8.${ENV_TUNNEL_NAME:-${ENV_NET:-0}}${ENV_RUN:-}
    networks:
      default:
        ipv4_address: 172.22.${ENV_NET:-0}.1${ENV_RUN:-0}3
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - mysql-8:/var/lib/mysql
    environment:
      MYSQL_USER: ${MYSQL_USER:-mysql}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-root}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-${MYSQL_PASSWORD:-root}}
    ports:
      - ${ENV_MYSQL8_PORT:-127.0.0.3:3306}:3306/tcp

  mysql-5-cert:
    profiles:
      - _
      - mysql-5
      - db
    depends_on:
      ca:
        condition: service_healthy
    image: smallstep/step-ca:latest
    restart: unless-stopped
    user: root
    volumes:
      - step:/home/step
      - tls:/run/tls
    entrypoint:
      - sh
      - -c
      - |
        set -e
        
        step ca certificate --force --provisioner=admin --password-file=secrets/password \
        --kty=RSA \
        --not-after=2400h \
        mysql-5 /run/tls/mysql-5.crt /run/tls/mysql-5.key

        [ -f /run/tls/mysql-5-ca.crt ] || {
        step ca root > /run/tls/mysql-5-ca.crt
        }

        chown 999:999 /run/tls/mysql-5.crt /run/tls/mysql-5.key /run/tls/mysql-5-ca.crt
        
        step ca renew --daemon --renew-period=30s \
          --exec="touch /dev/null" \
          /run/tls/mysql-5.crt /run/tls/mysql-5.key

  mysql-5:
    profiles:
      - _
      - mysql-5
      - db
    # for arm architecture set
    # ENV_MYSQL5_IMAGE=biarms/mysql:5.7
    build:
      dockerfile_inline: |-
        FROM ${ENV_MYSQL5_IMAGE:-mysql:5}

        RUN cat > /usr/local/sbin/env-prepare <<EOR
        #!/usr/bin/env bash
        cat > /tmp/my.extra.cnf <<EOF
        [client]
        host=mysql-5
        user=root
        password=\$${MYSQL_ROOT_PASSWORD}
        EOF
        EOR

        RUN cat > /usr/local/sbin/env-db <<EOR
        #!/usr/bin/env bash
        env-prepare
        mysql --defaults-extra-file=/tmp/my.extra.cnf "\$$@"
        EOR

        RUN cat > /usr/local/sbin/env-dump <<EOR
        #!/usr/bin/env bash
        env-prepare
        mysqldump --defaults-extra-file=/tmp/my.extra.cnf "\$$@"
        EOR

        RUN cat > /usr/local/sbin/env-dump-tables <<EOR
        #!/usr/bin/env bash
        function main() {
          local db=\$${1}; shift
          local dst=\$${db}-\$$(date +%y%m%d-%H%M)
          mkdir -p \$${dst}
          local sql="SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE LIKE 'BASE TABLE' AND TABLE_SCHEMA = '\$${db}';"
          local table
          for table in \$$(env-db -NBA -e "\$$sql")
          do
            echo "DUMPING TABLE: \$${db} \$${table} to \$${dst}/\$${table}.sql"
            env-dump \$$@ \$${db} \$${table} > \$${dst}/\$${table}.sql
          done
        }
        main "\$$@"
        EOR

        RUN chmod +x /usr/local/sbin/*
    restart: unless-stopped
    hostname: mysql-5.${ENV_TUNNEL_NAME:-${ENV_NET:-0}}${ENV_RUN:-}
    networks:
      default:
        ipv4_address: 172.22.${ENV_NET:-0}.1${ENV_RUN:-0}4

    depends_on:
      mysql-5-cert:
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - mysql-5:/var/lib/mysql
      - tls:/run/tls
    environment:
      MYSQL_USER: ${MYSQL_USER:-mysql}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-root}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-${MYSQL_PASSWORD:-root}}
    command:
      - --ssl
      - --tls-version=TLSv1.2,TLSv1.3
      - --ssl-cert=/run/tls/mysql-5.crt
      - --ssl-key=/run/tls/mysql-5.key
#      - --require-secure-transport=ON
#      - --ssl-ca=/rum/tls/mysql-5-ca.crt
    ports:
      - ${ENV_MYSQL5_PORT:-127.0.0.2:3306}:3306/tcp

  pma:
    profiles:
      - _
      - pma
      - db
      - mysql-5
      - mysql-8
    image: phpmyadmin:5
    restart: unless-stopped
    hostname: pma.${ENV_TUNNEL_NAME:-${ENV_NET:-0}}${ENV_RUN:-}
    networks:
      default:
        ipv4_address: 172.22.${ENV_NET:-0}.1${ENV_RUN:-0}5
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

    environment:
      MYSQL_USER: ${MYSQL_USER:-root}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-root}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-${MYSQL_PASSWORD:-root}}
      PMA_HOSTS: mysql-5,mysql-8,mariadb-11
      PMA_ABSOLUTE_URI: https://${ENV_PMA_TR_HOST:-${ENV_DOMAIN:-app.localhost}}${ENV_PMA_TR_PATH:-/pma}
    #      PMA_ARBITRARY: ${PMA_ARBITRARY:-1}
    labels:
      traefik.enable: true
      traefik.http.routers.pma.entrypoints: 443
      traefik.http.routers.pma.tls: true
      traefik.http.routers.pma.tls.certresolver: letsencrypt
      traefik.http.routers.pma.rule: ${ENV_PMA_TR_RULE:-Host(`${ENV_PMA_TR_HOST:-${ENV_DOMAIN:-app.localhost}}`) && PathPrefix(`/pma`)}
      traefik.http.middlewares.pma-path.stripprefix.prefixes: /pma
      traefik.http.routers.pma.middlewares: ${ENV_PMA_TR_MIDDLEWARES:-auth,pma-path}

  mailhog:
    profiles:
      - _
      - mailhog
    image: mailhog/mailhog:v1.0.1
    restart: unless-stopped
    hostname: mailhog.${ENV_TUNNEL_NAME:-${ENV_NET:-0}}${ENV_RUN:-}
    networks:
      default:
        ipv4_address: 172.22.${ENV_NET:-0}.1${ENV_RUN:-0}6
    labels:
      traefik.enable: true
      traefik.http.services.mailhog.loadbalancer.server.port: 8025
      traefik.http.routers.mailhog.service: mailhog
      traefik.http.routers.mailhog.entrypoints: 443
      traefik.http.routers.mailhog.tls: true
      traefik.http.routers.mailhog.tls.certresolver: letsencrypt
      traefik.http.routers.mailhog.rule: ${ENV_MAILHOG_TR_RULE:-Host(`${ENV_MAILHOG_TR_HOST:-${ENV_DOMAIN:-app.localhost}}`) && PathPrefix(`/mailhog`)}
      traefik.http.middlewares.mailhog-path.stripprefix.prefixes: /mailhog
      traefik.http.routers.mailhog.middlewares: ${ENV_MAILHOG_TR_MIDDLEWARES:-auth,mailhog-path}

  mail:
    profiles:
      - _
      - mail
    restart: unless-stopped
    image: mailserver/docker-mailserver:14
    hostname: ${ENV_MAIL_DOMAIN:-mail.${ENV_DOMAIN:-app.localhost}}${ENV_RUN:-}
    ports:
      - "25:${ENV_MAIL_PORT_25-25}"
      - "587:${ENV_MAIL_PORT_587-587}"
      - "465:${ENV_MAIL_PORT_465-465}"
      - "993:${ENV_MAIL_PORT_993-993}"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

      # https://docker-mailserver.github.io/docker-mailserver/edge/config/advanced/optional-config/
      - ${ENV_MAIL_VOLUME_CONFIG:-/mail/config:/tmp/docker-mailserver}
      - ${ENV_MAIL_VOLUME_STORAGE:-/mail/storage:/var/mail}
      - ${ENV_MAIL_VOLUME_STATE:-/mail/state:/var/mail-state}
      - ${ENV_MAIL_VOLUME_LOGS:-/mail/logs:/var/log/mail}

    environment: # https://docker-mailserver.github.io/docker-mailserver/edge/config/environment/
      SSL_TYPE: ${ENV_MAIL_SSL_TYPE-letsencrypt}
      SSL_DOMAIN: ${ENV_MAIL_DOMAIN:-mail.${ENV_DOMAIN:-app.localhost}}
